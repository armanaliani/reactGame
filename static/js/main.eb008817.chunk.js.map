{"version":3,"sources":["firebase.js","assets/gameMachineTwo.png","Home.js","assets/gameController.png","GameLobby.js","GameBoard.js","Header.js","Footer.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Home","onStart","e","preventDefault","dbRef","database","ref","state","gameObj","cellOne","cellTwo","cellThree","cellFour","cellFive","cellSix","cellSeven","cellEight","cellNine","boardClass","gameOutcome","playerOneJoined","playerTwoJoined","key","push","setState","toLobby","this","to","className","onSubmit","type","src","image","alt","Component","withRouter","GameLobby","copyLink","copyUrl","document","getElementById","select","setSelectionRange","execCommand","blur","linkCopied","setTimeout","removeMssg","game","props","match","params","gameKey","on","snapshot","val","id","value","onClick","GameBoard","handleClick","cell","target","cellClassArr","split","cellStateClass","slice","toString","includes","placeMark","currentClass","classList","add","gameOver","setStorage","sessionStorageItem","storageThing","window","sessionStorage","getItem","updatePlayerStatus","setStateClass","switchTurns","turnMssg","checkWin","endGame","isDraw","updateBoardClass","extraPlayerRedirect","extraPlayer","cellElements","querySelectorAll","some","combination","every","index","contains","draw","winningMessageElement","winningMessageTextElement","querySelector","innerText","updateGameOutcome","clear","clearStorage","endGamePlayerTwo","handleRestart","forEach","remove","turnIndication","updateNewGame","handleRestartMessage","dbRefBoard","once","snap","set","symbol","updateCellData","player","status","stateName","sessionGameObject","setItem","extraMessageElement","data-cell","data-winning-message-text","Header","tabIndex","Footer","href","rel","App","basename","process","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.eb008817.chunk.js","sourcesContent":["import firebase from \"firebase/app\"\r\nimport \"firebase/database\";\r\n\r\n// Configure Firebase\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAkSHQyuR6FQ8FkN9atRMvF9Nhbba0B1os\",\r\n    authDomain: \"reacttictactoe-69083.firebaseapp.com\",\r\n    databaseURL: \"https://reacttictactoe-69083-default-rtdb.firebaseio.com\",\r\n    projectId: \"reacttictactoe-69083\",\r\n    storageBucket: \"reacttictactoe-69083.appspot.com\",\r\n    messagingSenderId: \"705467616619\",\r\n    appId: \"1:705467616619:web:d996b0ba5efecc294e102e\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","export default __webpack_public_path__ + \"static/media/gameMachineTwo.bd3743ca.png\";","// Home Page\r\nimport React, {Component} from \"react\";\r\nimport firebase from \"./firebase\";\r\nimport {withRouter, Redirect} from \"react-router-dom\";\r\nimport image from './assets/gameMachineTwo.png';\r\n\r\nclass Home extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            key: '',\r\n            cellOne: '',\r\n            cellTwo: '',\r\n            cellThree: '',\r\n            cellFour: '',\r\n            cellFive: '',\r\n            cellSix: '',\r\n            cellSeven: '',\r\n            cellEight: '',\r\n            cellNine: '',\r\n            boardClass: 'x',\r\n            gameOutcome: '',\r\n            playerOneJoined:'',\r\n            playerTwoJoined:'',\r\n            toLobby: false\r\n        };\r\n    }\r\n\r\n// handle events\r\nonStart = (e) => {\r\n    e.preventDefault();\r\n    const dbRef = firebase.database().ref();\r\n    const state = this.state;\r\n    const gameObj = {\r\n        cellOne: state.cellOne,\r\n        cellTwo: state.cellTwo,\r\n        cellThree: state.cellThree,\r\n        cellFour: state.cellFour,\r\n        cellFive: state.cellFive,\r\n        cellSix: state.cellSix,\r\n        cellSeven: state.cellSeven,\r\n        cellEight: state.cellEight,\r\n        cellNine: state.cellNine,\r\n        boardClass: state.boardClass,\r\n        gameOutcome: state.gameOutcome,\r\n        playerOneJoined: state.playerOneJoined,\r\n        playerTwoJoined: state.playerTwoJoined,\r\n    };\r\n\r\n    const {key} = dbRef.push(gameObj);\r\n\r\n    this.setState({\r\n        key,\r\n        toLobby: true\r\n    })\r\n}\r\n\r\n    render() {\r\n        const key = this.state.key\r\n        if(this.state.toLobby === true) {\r\n            return  <Redirect  to={`/lobby/${key}`} />\r\n        }\r\n        return (\r\n            <main className=\"mainPageContent wrapper home\">\r\n                <div className=\"homeLayout\">\r\n                    <h1>TIC TAC TOE</h1>\r\n                    <p>Play Tic Tac Toe online in 3 simple steps</p>\r\n                    <ul>\r\n                        <li>Start a game</li>\r\n                        <li>Invite friends</li>\r\n                        <li>Play!</li>\r\n                    </ul>\r\n                    <form onSubmit={this.onStart}>\r\n                        <button type=\"submit\" className=\"button\">start game</button>\r\n                    </form>\r\n                </div>\r\n                <div className=\"homeImg img\">\r\n                    <img src={image} alt=\"old school arcade machine, ready to play Tic Tac Toe\"/>\r\n                </div>\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Home);","export default __webpack_public_path__ + \"static/media/gameController.efa36326.png\";","import React, { Component } from 'react';\r\nimport firebase from \"./firebase\";\r\nimport {Link} from 'react-router-dom';\r\nimport image from './assets/gameController.png';\r\n\r\n\r\nclass GameLobby extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            game: {},\r\n            linkCopied: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const key = this.props.match.params.gameKey\r\n        firebase\r\n        .database()\r\n        .ref(key)\r\n        .on(\"value\", (snapshot) => {\r\n            this.setState({\r\n                game: snapshot.val()\r\n            })\r\n        })\r\n    }\r\n\r\n    copyLink = () => {\r\n        const copyUrl = document.getElementById('gameUrl')\r\n        copyUrl.select()\r\n        // for mobile\r\n        copyUrl.setSelectionRange(0, 99999)\r\n        document.execCommand(\"copy\")\r\n        copyUrl.blur();\r\n        this.setState({\r\n            linkCopied: true\r\n        })\r\n        setTimeout(this.removeMssg, 1000)\r\n    }\r\n\r\n    removeMssg = () => {\r\n        this.setState({\r\n            linkCopied: false\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const key = this.props.match.params.gameKey\r\n        return (\r\n            <div className=\"mainPageContent gameLobby wrapper\">\r\n                <p className=\"linkInstructions\">Here's your unique game link, send it to your opponent</p>\r\n                <div className=\"gameLinkDiv\">\r\n                    {/* <p id='gameUrl'>{`https://armanaliani.github.io/reactGame/gameboard/${key}`}</p> */}\r\n                    <input type=\"text\" id='gameUrl' value={`https://armanaliani.github.io/reactGame/gameboard/${key}`}/>\r\n                    <div>\r\n                        <button onClick={this.copyLink}>Copy Link</button>\r\n                        <p className={this.state.linkCopied === true ? \"show copiedLink\" : \"copiedLink\"}>Copied to Clipboard</p>\r\n                    </div>\r\n                </div>\r\n                <Link to={`/gameboard/${key}`} className=\"button\">Join Game</Link>\r\n                <div className=\"lobbyImg img\">\r\n                    <img src={image} alt=\"A gaming controller\"/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameLobby;","import React, {Component} from 'react';\r\nimport firebase from './firebase';\r\nimport {Link, Redirect} from 'react-router-dom';\r\n\r\n// component------------------\r\nclass GameBoard extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            game: {},\r\n            cellOne: '',\r\n            cellTwo: '',\r\n            cellThree: '',\r\n            cellFour: '',\r\n            cellFive: '',\r\n            cellSix: '',\r\n            cellSeven: '',\r\n            cellEight: '',\r\n            cellNine: '',\r\n            boardClass: 'x',\r\n            gameOutcome: '',\r\n            playerOneJoined:'',\r\n            playerTwoJoined:'',\r\n            gameOver: false,\r\n            extraPlayer: false,\r\n            turnMssg: 'its anyones move',\r\n        }\r\n    }\r\n\r\n    // takes game link to retreive matching firebase game data --------------\r\n    componentDidMount() {\r\n        const key = this.props.match.params.gameKey\r\n        firebase\r\n        .database()\r\n        .ref(key)\r\n        .on(\"value\", (snapshot) => {\r\n            this.setState({\r\n                game: snapshot.val(),\r\n                cellOne: snapshot.val().cellOne,\r\n                cellTwo: snapshot.val().cellTwo,\r\n                cellThree: snapshot.val().cellThree,\r\n                cellFour: snapshot.val().cellFour,\r\n                cellFive: snapshot.val().cellFive,\r\n                cellSix: snapshot.val().cellSix,\r\n                cellSeven: snapshot.val().cellSeven,\r\n                cellEight: snapshot.val().cellEight,\r\n                cellNine: snapshot.val().cellNine,\r\n                boardClass: snapshot.val().boardClass,\r\n                gameOutcome: snapshot.val().gameOutcome,\r\n                playerOneJoined: snapshot.val().playerOneJoined,\r\n                playerTwoJoined: snapshot.val().playerTwoJoined,\r\n            })\r\n            // checks to see if there is an extra player\r\n            this.extraPlayer(key)\r\n            \r\n            // // check game outcome on load\r\n            if (this.checkWin(this.state.boardClass)) {\r\n                this.endGame(false)\r\n            } else if (this.isDraw()) {\r\n                // calls to a second version of endGame that prevents the gameoutcome db override issue on draw game outcomes\r\n                this.endGamePlayerTwo(true)\r\n                this.setState({\r\n                    gameOutcome: 'draw'\r\n                })\r\n            }\r\n            this.handleRestartMessage()\r\n            this.turnIndication()\r\n        })\r\n    }\r\n\r\n    // when cell is clicked, place the appropriate marker based on turn, push new turn to firebase, and change cell state to 'x' or 'circle' -------------------------\r\n    handleClick = (e) => {\r\n        const cell = e.target\r\n        const state = this.state\r\n        const boardClass = state.boardClass\r\n\r\n        // isolating the classname with cell'Number'\r\n        const cellClasses = e.target.className\r\n        const cellClassArr = cellClasses.split(' ');\r\n        const cellNumberArr = cellClassArr.slice(1,2)\r\n        const cellStateClass = cellNumberArr.toString();\r\n\r\n        // making sure there isnt already a marker in the chosen cell-------\r\n        if ((!cellClassArr.includes('x')) && (!cellClassArr.includes('circle'))) {\r\n            const key = this.props.match.params.gameKey\r\n            const gameObj = [\r\n                state.cellOne,\r\n                state.cellTwo,\r\n                state.cellThree,\r\n                state.cellFour,\r\n                state.cellFive,\r\n                state.cellSix,\r\n                state.cellSeven,\r\n                state.cellEight,\r\n                state.cellNine,\r\n                state.gameOver\r\n            ];\r\n            // makes sure board is clear before pushing gameobject to session storage, ensures its only pushed once per game\r\n            if ((!gameObj.includes('x')) && (!gameObj.includes('circle'))) {\r\n                this.setStorage(key, '');\r\n            }\r\n            const sessionStorageItem = key\r\n            const storageThing = window.sessionStorage.getItem(sessionStorageItem);\r\n            // assigning x and o signs to players, and not allowing more than 2 players in a single game\r\n            if ((state.playerOneJoined === '' ) && (state.playerTwoJoined === '')) {\r\n            // if both states are missing;\r\n            //  run placemark for boardclass x if boardclass is also x\r\n                if (state.boardClass === 'x') {\r\n                        // push 'playerX' to session storage \r\n                        this.setStorage(key, 'playerX');\r\n                        //  push player One joined to db\r\n                        this.updatePlayerStatus('playerOneJoined', 'yes')\r\n                        // set state player one joined\r\n                        this.setState({\r\n                            playerOneJoined: 'yes'\r\n                        })\r\n                        this.setStateClass(cellStateClass)\r\n                        placeMark(cell, boardClass)\r\n                        // switch player turns\r\n                        this.switchTurns()\r\n                        this.setState({\r\n                            turnMssg: 'waiting for opponent...'\r\n                        })\r\n                    }\r\n            } else if ((state.playerOneJoined === 'yes') && (state.playerTwoJoined === '') && (storageThing === null)) {\r\n            // if player one has joined but player 2 has not;\r\n            //  run placemark for boardclass o if boardclass is also circle\r\n                if (state.boardClass === 'circle') {\r\n                        // push 'playerO' to session storage \r\n                        this.setStorage(key, 'playerO');\r\n                        //  push player Two joined to db\r\n                        this.updatePlayerStatus('playerTwoJoined', 'yes')\r\n                        // set state player two joined\r\n                        this.setState({\r\n                            playerTwoJoined: 'yes'\r\n                        })\r\n                        this.setStateClass(cellStateClass)\r\n                        placeMark(cell, boardClass)\r\n                        // switch player turns\r\n                        this.switchTurns()\r\n                        this.setState({\r\n                            turnMssg: 'waiting for opponent...'\r\n                        })\r\n                    }\r\n            } else if (state.playerOneJoined && state.playerTwoJoined === 'yes') {\r\n                // if both players have joined on db, check for session storage to verify which player the user currently is one of the original two players\r\n                if (storageThing === 'playerX') {\r\n                // if session storage has either player x;\r\n                    // run placemark for x boardclass\r\n                    if (state.boardClass === 'x') {\r\n                        placeMark(cell, boardClass)\r\n                        this.setStateClass(cellStateClass)\r\n                        // switch player turns\r\n                        this.switchTurns()\r\n                        this.setState({\r\n                            turnMssg: 'waiting for opponent...',\r\n                        })\r\n                    }\r\n                } else if  (storageThing === 'playerO') {\r\n                // if session storage has either player o;\r\n                    // run placemark for o boardclass\r\n                    if (state.boardClass === 'circle') {\r\n                        placeMark(cell, boardClass)\r\n                        this.setStateClass(cellStateClass)\r\n                        // switch player turns\r\n                        this.switchTurns()\r\n                        this.setState({\r\n                            turnMssg: 'waiting for opponent...',\r\n                        })\r\n                    }\r\n                } else if (storageThing === null) {\r\n                // if the player is an extra player do nothing\r\n                    return;\r\n                }\r\n            }\r\n            // ----------------------------------------\r\n            // places X or O in cell spot\r\n            function placeMark(cell, currentClass) {\r\n                cell.classList.add(currentClass)\r\n            }\r\n\r\n            if (this.checkWin(boardClass)) {\r\n                this.endGame(false)\r\n                this.setState({\r\n                    gameOutcome: boardClass,\r\n                })\r\n            } else if (this.isDraw()) {\r\n                this.endGame(true)\r\n                this.setState({\r\n                    gameOutcome: 'draw',\r\n                })\r\n            } \r\n        }\r\n    }\r\n\r\n    setStateClass(cellStateClass) {\r\n        const boardClass = this.state.boardClass\r\n        // setting cell state of matching state class to x or circle\r\n        if(cellStateClass === 'cellOne') {\r\n            this.setState({\r\n                cellOne: boardClass\r\n            })\r\n            this.updateCellData('cellOne')\r\n        } else if (cellStateClass === 'cellTwo') {\r\n            this.setState({\r\n                cellTwo: boardClass\r\n            })\r\n            this.updateCellData('cellTwo')\r\n        } else if (cellStateClass === 'cellThree') {\r\n            this.setState({\r\n                cellThree: boardClass\r\n            })\r\n            this.updateCellData('cellThree')\r\n        } else if (cellStateClass === 'cellFour') {\r\n            this.setState({\r\n                cellFour: boardClass\r\n            })\r\n            this.updateCellData('cellFour')\r\n        } else if (cellStateClass === 'cellFive') {\r\n            this.setState({\r\n                cellFive: boardClass\r\n            })\r\n            this.updateCellData('cellFive')\r\n        } else if (cellStateClass === 'cellSix') {\r\n            this.setState({\r\n                cellSix: boardClass\r\n            })\r\n            this.updateCellData('cellSix')\r\n        } else if (cellStateClass === 'cellSeven') {\r\n            this.setState({\r\n                cellSeven: boardClass\r\n            })\r\n            this.updateCellData('cellSeven')\r\n        } else if (cellStateClass === 'cellEight') {\r\n            this.setState({\r\n                cellEight: boardClass\r\n            })\r\n            this.updateCellData('cellEight')\r\n        } else if (cellStateClass === 'cellNine') {\r\n            this.setState({\r\n                cellNine: boardClass\r\n            })\r\n            this.updateCellData('cellNine')\r\n        }\r\n    }\r\n\r\n    // adds game to session storage\r\n    setStorage(key, status) {\r\n        const sessionStorageItem = key\r\n        const sessionGameObject = [\r\n                // will hold either 'playerX' or 'playerO'\r\n                status\r\n        ]\r\n        window.sessionStorage.setItem(sessionStorageItem, sessionGameObject);\r\n    }\r\n\r\n    // switches 'x'/'circle' turn -------------\r\n    switchTurns = () => {\r\n        const boardClass = this.state.boardClass\r\n        // switch board class\r\n        if  (boardClass === 'x') {\r\n            this.setState({\r\n                boardClass: 'circle'\r\n            })\r\n            this.updateBoardClass('boardClass')\r\n        } else if (boardClass === 'circle') {\r\n            this.setState({\r\n                boardClass: 'x'\r\n            })\r\n            this.updateBoardClass('boardClass')\r\n        }\r\n    }\r\n\r\n    // checks to see if there is an extra player\r\n    extraPlayer(key) {\r\n        const state = this.state\r\n        const sessionStorageItem = key\r\n        const boardClass = this.state.boardClass\r\n        const storageThing = window.sessionStorage.getItem(sessionStorageItem);\r\n        const extraMessageElement = document.getElementById('extraMessage')\r\n        if ((state.playerOneJoined === 'yes') && (state.playerTwoJoined === 'yes') && (storageThing === null)) {\r\n            if ((!this.checkWin(boardClass)) && (!this.isDraw()) && (state.gameOver === false)) {\r\n                extraMessageElement.classList.add('show')\r\n                setTimeout(this.extraPlayerRedirect, 3000)\r\n            }\r\n        }\r\n    }\r\n\r\n    // sets extra player to state (after delay from extraPlayer function)\r\n    extraPlayerRedirect = () => {\r\n        this.setState({\r\n            extraPlayer: true\r\n        })\r\n    }\r\n\r\n    // check to see if theres a winning combination------------\r\n    checkWin = (currentClass) => {\r\n        const cellElements = document.querySelectorAll('[data-cell]')\r\n        const winningCombinations = [\r\n            // horizontals\r\n            [0,1,2],\r\n            [3,4,5],\r\n            [6,7,8],\r\n            // verticals\r\n            [0,3,6],\r\n            [1,4,7],\r\n            [2,5,8],\r\n            // diagonals\r\n            [0,4,8],\r\n            [2,4,6],\r\n        ]\r\n        // .some will return true if any values within the array are true\r\n        return winningCombinations.some(combination => {\r\n            return combination.every(index => {\r\n                return cellElements[index].classList.contains(currentClass)\r\n            })\r\n        })\r\n    }\r\n\r\n    // check to see if all cells have a className of 'x' or 'circle'\r\n    isDraw = () => {\r\n        // extra layer of error handling security for when last cell is also the game winning cell\r\n        // if (!this.checkWin()) {\r\n            const cellElements = document.querySelectorAll('[data-cell]')\r\n            return [...cellElements].every(cell => {\r\n                return cell.classList.contains('x') || cell.classList.contains('circle')\r\n            })\r\n        // }\r\n    }\r\n\r\n    // display game outcome\r\n    endGame = (draw) => {\r\n        const key = this.props.match.params.gameKey\r\n        const boardClass = this.state.boardClass\r\n        const winningMessageElement = document.getElementById('winningMessage')\r\n        const winningMessageTextElement = document.querySelector('[data-winning-message-text]')\r\n        if (this.state.gameOutcome === 'x') {\r\n            winningMessageTextElement.innerText = `X's Win!`\r\n            this.setState({\r\n                gameOver: true\r\n            })\r\n        } else if (this.state.gameOutcome === 'circle') {\r\n            winningMessageTextElement.innerText = `O's Win!`\r\n            this.setState({\r\n                gameOver: true\r\n            })\r\n        } else {\r\n            if ((draw) || (this.state.gameOutcome === 'draw')) {\r\n                winningMessageTextElement.innerText = \"Draw!\"\r\n                if (this.state.gameOutcome === '') {\r\n                    this.setState({\r\n                        gameOutcome: 'draw',\r\n                        gameOver: true\r\n                    })\r\n                }\r\n                this.updateGameOutcome('draw')\r\n            } else if (boardClass === 'x') {\r\n                winningMessageTextElement.innerText = `X's Win!`\r\n                if (this.state.gameOutcome === '') {\r\n                    this.setState({\r\n                        gameOutcome: 'x',\r\n                        gameOver: true\r\n                    })\r\n                }\r\n                this.updateGameOutcome('x')\r\n            } else if (boardClass === 'circle') {\r\n                winningMessageTextElement.innerText = `O's Win!`\r\n                if (this.state.gameOutcome === '') {\r\n                    this.setState({\r\n                        gameOutcome: 'circle',\r\n                        gameOver: true\r\n                    })\r\n                }\r\n                this.updateGameOutcome('circle')\r\n            }\r\n        }\r\n        winningMessageElement.classList.add('show')\r\n        // // clear session storage\r\n        // // -------------\r\n        clearStorage(key)\r\n        function clearStorage(key) {\r\n            window.sessionStorage.clear(key)\r\n        }\r\n    }\r\n\r\n    // a version of the endgame function specifically to be called by player 2 pulling data from db, to avoid multiple setstates and db updates\r\n    endGamePlayerTwo = (draw) => {\r\n        const key = this.props.match.params.gameKey\r\n        const winningMessageElement = document.getElementById('winningMessage')\r\n        const winningMessageTextElement = document.querySelector('[data-winning-message-text]')\r\n        if (this.state.gameOutcome === 'x') {\r\n            winningMessageTextElement.innerText = `X's Win!`\r\n            this.setState({\r\n                gameOver: true\r\n            })\r\n        } else if (this.state.gameOutcome === 'circle') {\r\n            winningMessageTextElement.innerText = `O's Win!`\r\n            this.setState({\r\n                gameOver: true\r\n            })\r\n        } else if ((draw) || (this.state.gameOutcome === 'draw')) {\r\n        // including x and o win conditions so that a final x or o placement win does not get triggered as a draw\r\n                winningMessageTextElement.innerText = \"Draw!\"\r\n                if (this.state.gameOutcome === '') {\r\n                    this.setState({\r\n                        gameOutcome: 'draw',\r\n                        gameOver: true\r\n                    })\r\n                }\r\n        }\r\n        winningMessageElement.classList.add('show')\r\n        // // clear session storage\r\n        // // -------------\r\n        clearStorage(key)\r\n        function clearStorage(key) {\r\n            window.sessionStorage.clear(key)\r\n        }\r\n    }\r\n\r\n    // clears board states and calls for clearing database info ------------\r\n    handleRestart = () => {\r\n        // remove cell classes\r\n        const cellElements = document.querySelectorAll('[data-cell]')\r\n        cellElements.forEach(cell => {\r\n            cell.classList.remove('x')\r\n            cell.classList.remove('circle')\r\n        })\r\n        // remove game outcome message\r\n        const winningMessageElement = document.getElementById('winningMessage')\r\n        winningMessageElement.classList.remove('show')\r\n\r\n        this.setState({\r\n            boardClass: 'x',\r\n            cellOne: '',\r\n            cellTwo: '',\r\n            cellThree: '',\r\n            cellFour: '',\r\n            cellFive: '',\r\n            cellSix: '',\r\n            cellSeven: '',\r\n            cellEight: '',\r\n            cellNine: '',\r\n            gameOutcome: '',\r\n            gameOver: false,\r\n            turnIndication: 'its anyones move',\r\n            \r\n        })\r\n        // clears db\r\n        this.updateNewGame()\r\n    }\r\n\r\n    // if gameOutcome has been set to '' from restart, remove the game outcome message (for player 2)\r\n    handleRestartMessage = () => {\r\n        if (this.state.gameOutcome === '') {\r\n            // remove game outcome message\r\n            const winningMessageElement = document.getElementById('winningMessage')\r\n            winningMessageElement.classList.remove('show')\r\n        }\r\n    }\r\n\r\n    // clear database game info for new game-------\r\n    updateNewGame = () => {\r\n        const key = this.props.match.params.gameKey\r\n        // set board class back to x\r\n        const dbRefBoard = firebase.database().ref(`${key}/boardClass`);\r\n        dbRefBoard.once('value', (snap) => {\r\n            let value = snap.val();\r\n            value = 'x'\r\n            dbRefBoard.set(value);\r\n        })\r\n        // set cell classes and outcome back to ''\r\n        const dbCellRef = [\r\n            firebase.database().ref(`${key}/cellOne`),\r\n            firebase.database().ref(`${key}/cellTwo`),\r\n            firebase.database().ref(`${key}/cellThree`),\r\n            firebase.database().ref(`${key}/cellFour`),\r\n            firebase.database().ref(`${key}/cellFive`),\r\n            firebase.database().ref(`${key}/cellSix`),\r\n            firebase.database().ref(`${key}/cellSeven`),\r\n            firebase.database().ref(`${key}/cellEight`),\r\n            firebase.database().ref(`${key}/cellNine`),\r\n            firebase.database().ref(`${key}/gameOutcome`),\r\n            firebase.database().ref(`${key}/playerOneJoined`),\r\n            firebase.database().ref(`${key}/playerTwoJoined`),\r\n        ]\r\n        dbCellRef.forEach((ref) => {\r\n            ref.once('value', (snap) => {\r\n                let value = snap.val();\r\n                value = ''\r\n                ref.set(value);\r\n            })\r\n        })\r\n        this.setState({\r\n            turnMssg: 'its anyones move'\r\n        })\r\n    }\r\n\r\n    // send game outcome info to firebase db --------------\r\n    updateGameOutcome = (symbol) => {\r\n        const key = this.props.match.params.gameKey\r\n        const dbRef = firebase.database().ref(`${key}/gameOutcome`);\r\n        // issue with 2 clients, \r\n        dbRef.once(\"value\", (snap) => {\r\n            let value = snap.val();\r\n            value = symbol\r\n            dbRef.set(value);\r\n        });\r\n    }\r\n\r\n    // send cell data to firebase ---------------------\r\n    updateCellData = (cell) => {\r\n        const key = this.props.match.params.gameKey\r\n        const dbRef = firebase.database().ref(`${key}/${cell}`);\r\n        const boardClass = this.state.boardClass\r\n        dbRef.once(\"value\", (snap) => {\r\n            let value = snap.val();\r\n            if (boardClass === 'x') {\r\n                value = 'x'\r\n                dbRef.set(value);\r\n            } else if (boardClass === 'circle') {\r\n                value = 'circle'\r\n                dbRef.set(value);\r\n            }\r\n        });\r\n    }\r\n\r\n    // send player one/two joined game to db ---------------\r\n    updatePlayerStatus = (player, status) => {\r\n        const key = this.props.match.params.gameKey\r\n        const dbRef = firebase.database().ref(`${key}/${player}`);\r\n        dbRef.once(\"value\", (snap) => {\r\n            let value = snap.val();\r\n            value = status\r\n            dbRef.set(value);\r\n        })\r\n    }\r\n\r\n    // send board class to firebase ---------------------\r\n    updateBoardClass = (stateName) => {\r\n        const key = this.props.match.params.gameKey\r\n        const dbRef = firebase.database().ref(`${key}/${stateName}`);\r\n        const boardClass = this.state.boardClass\r\n        dbRef.once(\"value\", (snap) => {\r\n            let value = snap.val();\r\n            if (boardClass === 'x') {\r\n                value = 'circle'\r\n                dbRef.set(value);\r\n            } else if (boardClass === 'circle') {\r\n                value = 'x'\r\n                dbRef.set(value);\r\n            }\r\n        });\r\n    }\r\n\r\n    turnIndication() {\r\n        const state = this.state\r\n        const key = this.props.match.params.gameKey\r\n        const sessionStorageItem = key\r\n        const boardClass = this.state.boardClass\r\n        const storageThing = window.sessionStorage.getItem(sessionStorageItem);\r\n\r\n        if((storageThing === 'playerX') && (boardClass === 'circle')) {\r\n            this.setState({\r\n                turnMssg: `waiting for opponent...`\r\n            })\r\n        } else if ((storageThing === 'playerO') && (boardClass === 'x')) {\r\n            this.setState({\r\n                turnMssg: `waiting for opponent...`\r\n            })\r\n        } else if ((state.playerOneJoined === '') && (state.playerTwoJoined === '')) {\r\n            this.setState({\r\n                turnMssg: `its anyones move`\r\n            })\r\n        } else if  ((state.playerOneJoined === 'yes') && (state.playerTwoJoined === '')) {\r\n            this.setState({\r\n                turnMssg: `its your move player O`\r\n            })\r\n        } else if ((state.playerOneJoined === 'yes') && (state.playerTwoJoined === 'yes') && (storageThing === 'playerX') && (boardClass === 'x')) {\r\n            this.setState({\r\n                turnMssg: 'its your move player X'\r\n            })\r\n        }  else if ((state.playerOneJoined === 'yes') && (state.playerTwoJoined === 'yes') && (storageThing === 'playerO') && (boardClass === 'circle')) {\r\n            this.setState({\r\n                turnMssg: 'its your move player O'\r\n            })\r\n        } else {\r\n            return\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        const key = this.props.match.params.gameKey\r\n        const boardClass = this.state.boardClass;\r\n        const state = this.state;\r\n        if (state.extraPlayer === true) {\r\n            return  <Redirect  to=\"/\" />\r\n        }\r\n        return (\r\n            <main className=\"mainPageContent wrapper gameBoard\">\r\n                <div className=\"turnIndicatorMssg\" id=\"turnIndMssg\">\r\n                    <p>{state.turnMssg}</p>\r\n                </div>\r\n                <div className={`board ${boardClass}`} id=\"board\">\r\n                    <div className={`cell cellOne ${state.cellOne}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellTwo ${state.cellTwo}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellThree ${state.cellThree}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellFour ${state.cellFour}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellFive ${state.cellFive}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellSix ${state.cellSix}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellSeven ${state.cellSeven}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellEight ${state.cellEight}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellNine ${state.cellNine}`} data-cell onClick={this.handleClick}></div>\r\n                </div>\r\n                <div className=\"winningMessage\" id=\"winningMessage\">\r\n                    <div data-winning-message-text></div>\r\n                    <div className=\"messageButtons\">\r\n                        <button id=\"restartButton button\" onClick={this.handleRestart}>Restart</button>\r\n                        <Link to=\"/\" className=\"newGame button\" onClick={this.handleRestart}>Home</Link>\r\n                    </div>\r\n                </div>\r\n                {/*pop up message to show to extra player explaining that redirect was due to game lobby being full*/}\r\n                <div className=\"extraPlyerMessage\" id=\"extraMessage\">\r\n                    <div>\r\n                        <h2>This Games Full!</h2>\r\n                        <p>You'll be redirected in 3 seconds</p>\r\n                    </div>\r\n                </div>\r\n                <Link to={`/lobby/${key}`} className=\"button\">Back to Lobby</Link>\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameBoard;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"wrapper\">\r\n            <Link to=\"/\" tabIndex=\"0\">\r\n                <p>Home</p>\r\n            </Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <div className=\"wrapper\">\r\n                <p>Created by <a href=\"https://alianicodes.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Arman Aliani</a></p>\r\n                <p>Images from <a href=\"https://undraw.co/\" target=\"_blank\" rel=\"noopener noreferrer\">unDraw</a></p>\r\n            </div>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","// imports\nimport React, { Component, Fragment } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from './Home';\nimport GameLobby from './GameLobby';\nimport GameBoard from './GameBoard';\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\n\n\n\n// component\nclass App extends Component {\n  render() {\n    return (\n        <Router basename={process.env.PUBLIC_URL}>\n          <Fragment>\n            <Header />\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/lobby/:gameKey\" component={GameLobby} />\n            <Route path=\"/gameboard/:gameKey\" component={GameBoard} /> \n            <Footer />\n          </Fragment>\n        </Router>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}