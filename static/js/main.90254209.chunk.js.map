{"version":3,"sources":["firebase.js","Home.js","GameLobby.js","GameBoard.js","Header.js","Footer.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Home","onStart","e","preventDefault","dbRef","database","ref","state","gameObj","cellOne","cellTwo","cellThree","cellFour","cellFive","cellSix","cellSeven","cellEight","cellNine","boardClass","gameOutcome","playerOneJoined","playerTwoJoined","key","push","setState","toLobby","this","to","onSubmit","type","Component","withRouter","GameLobby","copyLink","copyUrl","document","getElementById","textContent","window","navigator","clipboard","writeText","game","props","match","params","gameKey","on","snapshot","val","className","id","onClick","GameBoard","handleClick","cell","target","cellClassArr","split","cellStateClass","slice","toString","includes","placeMark","currentClass","classList","add","gameOver","setStorage","sessionStorageItem","storageThing","sessionStorage","getItem","updatePlayerStatus","setStateClass","switchTurns","checkWin","endGame","isDraw","updateBoardClass","cellElements","querySelectorAll","some","combination","every","index","contains","draw","winningMessageElement","winningMessageTextElement","querySelector","innerText","updateGameOutcome","clear","clearStorage","endGamePlayerTwo","handleRestart","forEach","remove","updateNewGame","handleRestartMessage","dbRefBoard","once","snap","set","symbol","value","updateCellData","player","status","stateName","extraPlayer","sessionGameObject","setItem","console","log","data-cell","data-winning-message-text","Header","tabIndex","Footer","href","rel","App","basename","process","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.90254209.chunk.js","sourcesContent":["import firebase from \"firebase/app\"\r\nimport \"firebase/database\";\r\n\r\n// Configure Firebase\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAkSHQyuR6FQ8FkN9atRMvF9Nhbba0B1os\",\r\n    authDomain: \"reacttictactoe-69083.firebaseapp.com\",\r\n    databaseURL: \"https://reacttictactoe-69083-default-rtdb.firebaseio.com\",\r\n    projectId: \"reacttictactoe-69083\",\r\n    storageBucket: \"reacttictactoe-69083.appspot.com\",\r\n    messagingSenderId: \"705467616619\",\r\n    appId: \"1:705467616619:web:d996b0ba5efecc294e102e\"\r\n};\r\n\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;","// Home Page\r\nimport React, {Component} from \"react\";\r\nimport firebase from \"./firebase\";\r\nimport {withRouter, Redirect} from \"react-router-dom\";\r\n\r\nclass Home extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            key: '',\r\n            cellOne: '',\r\n            cellTwo: '',\r\n            cellThree: '',\r\n            cellFour: '',\r\n            cellFive: '',\r\n            cellSix: '',\r\n            cellSeven: '',\r\n            cellEight: '',\r\n            cellNine: '',\r\n            boardClass: 'x',\r\n            gameOutcome: '',\r\n            playerOneJoined:'',\r\n            playerTwoJoined:'',\r\n            toLobby: false\r\n        };\r\n    }\r\n\r\n// handle events\r\nonStart = (e) => {\r\n    e.preventDefault();\r\n    const dbRef = firebase.database().ref();\r\n    const state = this.state;\r\n    const gameObj = {\r\n        cellOne: state.cellOne,\r\n        cellTwo: state.cellTwo,\r\n        cellThree: state.cellThree,\r\n        cellFour: state.cellFour,\r\n        cellFive: state.cellFive,\r\n        cellSix: state.cellSix,\r\n        cellSeven: state.cellSeven,\r\n        cellEight: state.cellEight,\r\n        cellNine: state.cellNine,\r\n        boardClass: state.boardClass,\r\n        gameOutcome: state.gameOutcome,\r\n        playerOneJoined: state.playerOneJoined,\r\n        playerTwoJoined: state.playerTwoJoined,\r\n    };\r\n\r\n    const {key} = dbRef.push(gameObj);\r\n\r\n    this.setState({\r\n        key,\r\n        toLobby: true\r\n    })\r\n    // this.props.history.push(`/lobby/${key}`)\r\n}\r\n\r\n    render() {\r\n        const key = this.state.key\r\n        if(this.state.toLobby === true) {\r\n            return  <Redirect  to={`/lobby/${key}`} />\r\n        }\r\n        return (\r\n            <main>\r\n                <h1>Tic Tac Toe</h1>\r\n                <p>play tic tac toe online with friends</p>\r\n                <p>start game to get your game link to send to a friend</p>\r\n                <form onSubmit={this.onStart}>\r\n                    <button type=\"submit\">start game</button>\r\n                </form>\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default withRouter(Home);","import React, { Component } from 'react';\r\nimport firebase from \"./firebase\";\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nclass GameLobby extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            game: {}\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        const key = this.props.match.params.gameKey\r\n        firebase\r\n        .database()\r\n        .ref(key)\r\n        .on(\"value\", (snapshot) => {\r\n            this.setState({\r\n                game: snapshot.val()\r\n            })\r\n        })\r\n    }\r\n\r\n    copyLink = () => {\r\n        const copyUrl = document.getElementById('gameUrl').textContent\r\n        const clipboard = window.navigator.clipboard;\r\n        clipboard.writeText(copyUrl)\r\n    }\r\n\r\n\r\n    render() {\r\n        const key = this.props.match.params.gameKey\r\n        return (\r\n            <div>\r\n                <p>heres your unique game link, send it to your opponent</p>\r\n                <div className=\"gameLinkDiv\">\r\n                    <p id='gameUrl'>{`https://armanaliani.github.io/reactGame/gameboard/${key}`}</p>\r\n                    <button onClick={this.copyLink}>copy url</button>\r\n                </div>\r\n                <Link to={`/gameboard/${key}`}>Play</Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameLobby;","import React, {Component} from 'react';\r\nimport firebase from './firebase';\r\nimport {Link, Redirect} from 'react-router-dom';\r\n\r\n// component------------------\r\nclass GameBoard extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            game: {},\r\n            cellOne: '',\r\n            cellTwo: '',\r\n            cellThree: '',\r\n            cellFour: '',\r\n            cellFive: '',\r\n            cellSix: '',\r\n            cellSeven: '',\r\n            cellEight: '',\r\n            cellNine: '',\r\n            boardClass: 'x',\r\n            gameOutcome: '',\r\n            playerOneJoined:'',\r\n            playerTwoJoined:'',\r\n            gameOver: false,\r\n            extraPlayer: false,\r\n        }\r\n    }\r\n\r\n    // takes game link to retreive matching firebase game data --------------\r\n    componentDidMount() {\r\n        const key = this.props.match.params.gameKey\r\n        firebase\r\n        .database()\r\n        .ref(key)\r\n        .on(\"value\", (snapshot) => {\r\n            this.setState({\r\n                game: snapshot.val(),\r\n                cellOne: snapshot.val().cellOne,\r\n                cellTwo: snapshot.val().cellTwo,\r\n                cellThree: snapshot.val().cellThree,\r\n                cellFour: snapshot.val().cellFour,\r\n                cellFive: snapshot.val().cellFive,\r\n                cellSix: snapshot.val().cellSix,\r\n                cellSeven: snapshot.val().cellSeven,\r\n                cellEight: snapshot.val().cellEight,\r\n                cellNine: snapshot.val().cellNine,\r\n                boardClass: snapshot.val().boardClass,\r\n                gameOutcome: snapshot.val().gameOutcome,\r\n                playerOneJoined:snapshot.val().playerOneJoined,\r\n                playerTwoJoined:snapshot.val().playerTwoJoined,\r\n            })\r\n            // checks to see if there is an extra player\r\n            this.extraPlayer(key)\r\n            \r\n            // // check game outcome on load\r\n            if (this.checkWin(this.state.boardClass)) {\r\n                this.endGame(false)\r\n            } else if (this.isDraw()) {\r\n                // calls to a second version of endGame that prevents the gameoutcome db override issue on draw game outcomes\r\n                this.endGamePlayerTwo(true)\r\n                this.setState({\r\n                    gameOutcome: 'draw'\r\n                })\r\n            }\r\n            this.handleRestartMessage() \r\n        })\r\n    }\r\n\r\n    // when cell is clicked, place the appropriate marker based on turn, push new turn to firebase, and change cell state to 'x' or 'circle' -------------------------\r\n    handleClick = (e) => {\r\n        const cell = e.target\r\n        const state = this.state\r\n        const boardClass = state.boardClass\r\n\r\n        // isolating the classname with cell'Number'\r\n        const cellClasses = e.target.className\r\n        const cellClassArr = cellClasses.split(' ');\r\n        const cellNumberArr = cellClassArr.slice(1,2)\r\n        const cellStateClass = cellNumberArr.toString();\r\n\r\n        // making sure there isnt already a marker in the chosen cell-------\r\n        if ((!cellClassArr.includes('x')) && (!cellClassArr.includes('circle'))) {\r\n            const key = this.props.match.params.gameKey\r\n            const gameObj = [\r\n                state.cellOne,\r\n                state.cellTwo,\r\n                state.cellThree,\r\n                state.cellFour,\r\n                state.cellFive,\r\n                state.cellSix,\r\n                state.cellSeven,\r\n                state.cellEight,\r\n                state.cellNine,\r\n                state.gameOver\r\n            ];\r\n            // makes sure board is clear before pushing gameobject to session storage, ensures its only pushed once per game\r\n            if ((!gameObj.includes('x')) && (!gameObj.includes('circle'))) {\r\n                this.setStorage(key, '');\r\n            }\r\n            const sessionStorageItem = key\r\n            const storageThing = window.sessionStorage.getItem(sessionStorageItem);\r\n            // assigning x and o signs to players, and not allowing more than 2 players in a single game\r\n            if ((state.playerOneJoined === '' ) && (state.playerTwoJoined === '')) {\r\n            // if both states are missing;\r\n            //  run placemark for boardclass x if boardclass is also x\r\n                if (state.boardClass === 'x') {\r\n                        // push 'playerX' to session storage \r\n                        this.setStorage(key, 'playerX');\r\n                        //  push player One joined to db\r\n                        this.updatePlayerStatus('playerOneJoined', 'yes')\r\n                        // set state player one joined\r\n                        this.setState({\r\n                            playerOneJoined: 'yes'\r\n                        })\r\n                        this.setStateClass(cellStateClass)\r\n                        placeMark(cell, boardClass)\r\n                        // switch player turns\r\n                        this.switchTurns()\r\n                    }\r\n            } else if ((state.playerOneJoined === 'yes') && (state.playerTwoJoined === '') && (storageThing === null)) {\r\n            // if player one has joined but player 2 has not;\r\n            //  run placemark for boardclass o if boardclass is also circle\r\n                if (state.boardClass === 'circle') {\r\n                        // push 'playerO' to session storage \r\n                        this.setStorage(key, 'playerO');\r\n                        //  push player Two joined to db\r\n                        this.updatePlayerStatus('playerTwoJoined', 'yes')\r\n                        // set state player two joined\r\n                        this.setState({\r\n                            playerTwoJoined: 'yes'\r\n                        })\r\n                        this.setStateClass(cellStateClass)\r\n                        placeMark(cell, boardClass)\r\n                        // switch player turns\r\n                        this.switchTurns()\r\n                    }\r\n            } else if (state.playerOneJoined && state.playerTwoJoined === 'yes') {\r\n                // if both players have joined on db, check for session storage to verify which player the user currently is one of the original two players\r\n                if (storageThing === 'playerX') {\r\n                // if session storage has either player x;\r\n                    // run placemark for x boardclass\r\n                    if (state.boardClass === 'x') {\r\n                        placeMark(cell, boardClass)\r\n                        this.setStateClass(cellStateClass)\r\n                        // switch player turns\r\n                        this.switchTurns()\r\n                    }\r\n                } else if  (storageThing === 'playerO') {\r\n                // if session storage has either player o;\r\n                    // run placemark for o boardclass\r\n                    if (state.boardClass === 'circle') {\r\n                        placeMark(cell, boardClass)\r\n                        this.setStateClass(cellStateClass)\r\n                        // switch player turns\r\n                        this.switchTurns()\r\n                    }\r\n                } else if (storageThing === null) {\r\n                // if session storage has neither player x or player o params;\r\n                    // dont run anything (should there be an error handling message for the user?)\r\n                    return;\r\n                }\r\n            }\r\n\r\n            // ----------------------------------------\r\n            // // switch player turns\r\n            // this.switchTurns()\r\n\r\n            // places X or O in cell spot\r\n            // placeMark(cell, boardClass)\r\n            function placeMark(cell, currentClass) {\r\n                cell.classList.add(currentClass)\r\n            }\r\n\r\n            if (this.checkWin(boardClass)) {\r\n                this.endGame(false)\r\n                this.setState({\r\n                    gameOutcome: boardClass,\r\n                })\r\n            } else if (this.isDraw()) {\r\n                this.endGame(true)\r\n                this.setState({\r\n                    gameOutcome: 'draw',\r\n                })\r\n            } \r\n            // else {\r\n            //     this.switchTurns()\r\n            // }\r\n        }\r\n    }\r\n\r\n    setStateClass(cellStateClass) {\r\n        const boardClass = this.state.boardClass\r\n        // setting cell state of matching state class to x or circle\r\n        if(cellStateClass === 'cellOne') {\r\n            this.setState({\r\n                cellOne: boardClass\r\n            })\r\n            this.updateCellData('cellOne')\r\n        } else if (cellStateClass === 'cellTwo') {\r\n            this.setState({\r\n                cellTwo: boardClass\r\n            })\r\n            this.updateCellData('cellTwo')\r\n        } else if (cellStateClass === 'cellThree') {\r\n            this.setState({\r\n                cellThree: boardClass\r\n            })\r\n            this.updateCellData('cellThree')\r\n        } else if (cellStateClass === 'cellFour') {\r\n            this.setState({\r\n                cellFour: boardClass\r\n            })\r\n            this.updateCellData('cellFour')\r\n        } else if (cellStateClass === 'cellFive') {\r\n            this.setState({\r\n                cellFive: boardClass\r\n            })\r\n            this.updateCellData('cellFive')\r\n        } else if (cellStateClass === 'cellSix') {\r\n            this.setState({\r\n                cellSix: boardClass\r\n            })\r\n            this.updateCellData('cellSix')\r\n        } else if (cellStateClass === 'cellSeven') {\r\n            this.setState({\r\n                cellSeven: boardClass\r\n            })\r\n            this.updateCellData('cellSeven')\r\n        } else if (cellStateClass === 'cellEight') {\r\n            this.setState({\r\n                cellEight: boardClass\r\n            })\r\n            this.updateCellData('cellEight')\r\n        } else if (cellStateClass === 'cellNine') {\r\n            this.setState({\r\n                cellNine: boardClass\r\n            })\r\n            this.updateCellData('cellNine')\r\n        }\r\n    }\r\n\r\n    // place x/o mark on board\r\n    // placeMark(cell, currentClass) {\r\n    //     cell.classList.add(currentClass)\r\n    // }\r\n\r\n    // adds game to session storage\r\n    setStorage(key, status) {\r\n        const sessionStorageItem = key\r\n        const sessionGameObject = [\r\n                // will hold either 'playerX' or 'playerO'\r\n                status\r\n        ]\r\n        window.sessionStorage.setItem(sessionStorageItem, sessionGameObject);\r\n    }\r\n\r\n    // switches 'x'/'circle' turn -------------\r\n    switchTurns = () => {\r\n        const boardClass = this.state.boardClass\r\n        // switch board class\r\n        if  (boardClass === 'x') {\r\n            this.setState({\r\n                boardClass: 'circle'\r\n            })\r\n            this.updateBoardClass('boardClass')\r\n        } else if (boardClass === 'circle') {\r\n            this.setState({\r\n                boardClass: 'x'\r\n            })\r\n            this.updateBoardClass('boardClass')\r\n        }\r\n    }\r\n\r\n    // checks to see if there is an extra player\r\n    extraPlayer(key) {\r\n        const state = this.state\r\n        const sessionStorageItem = key\r\n        const boardClass = this.state.boardClass\r\n        const storageThing = window.sessionStorage.getItem(sessionStorageItem);\r\n        if ((state.playerOneJoined === 'yes') && (state.playerTwoJoined === 'yes') && (storageThing === null)) {\r\n            if ((!this.checkWin(boardClass)) && (!this.isDraw()) && (state.gameOver === false)) {\r\n                console.log('you who')\r\n                this.setState({\r\n                    extraPlayer: true\r\n                })\r\n                // this.props.history.push('/');\r\n            }\r\n        }\r\n    }\r\n\r\n    // check to see if theres a winning combination------------\r\n    checkWin = (currentClass) => {\r\n        const cellElements = document.querySelectorAll('[data-cell]')\r\n        const winningCombinations = [\r\n            // horizontals\r\n            [0,1,2],\r\n            [3,4,5],\r\n            [6,7,8],\r\n            // verticals\r\n            [0,3,6],\r\n            [1,4,7],\r\n            [2,5,8],\r\n            // diagonals\r\n            [0,4,8],\r\n            [2,4,6],\r\n        ]\r\n        // .some will return true if any values within the array are true\r\n        return winningCombinations.some(combination => {\r\n            return combination.every(index => {\r\n                return cellElements[index].classList.contains(currentClass)\r\n            })\r\n        })\r\n    }\r\n\r\n    // check to see if all cells have a className of 'x' or 'circle'\r\n    isDraw = () => {\r\n        // extra layer of error handling security for when last cell is also the game winning cell\r\n        // if (!this.checkWin()) {\r\n            const cellElements = document.querySelectorAll('[data-cell]')\r\n            return [...cellElements].every(cell => {\r\n                return cell.classList.contains('x') || cell.classList.contains('circle')\r\n            })\r\n        // }\r\n    }\r\n\r\n    // display game outcome\r\n    endGame = (draw) => {\r\n        const key = this.props.match.params.gameKey\r\n        const boardClass = this.state.boardClass\r\n        const winningMessageElement = document.getElementById('winningMessage')\r\n        const winningMessageTextElement = document.querySelector('[data-winning-message-text]')\r\n        if (this.state.gameOutcome === 'x') {\r\n            winningMessageTextElement.innerText = `X's Win!`\r\n            this.setState({\r\n                gameOver: true\r\n            })\r\n        } else if (this.state.gameOutcome === 'circle') {\r\n            winningMessageTextElement.innerText = `O's Win!`\r\n            this.setState({\r\n                gameOver: true\r\n            })\r\n        } else {\r\n            if ((draw) || (this.state.gameOutcome === 'draw')) {\r\n                winningMessageTextElement.innerText = \"Draw!\"\r\n                if (this.state.gameOutcome === '') {\r\n                    this.setState({\r\n                        gameOutcome: 'draw',\r\n                        gameOver: true\r\n                    })\r\n                }\r\n                this.updateGameOutcome('draw')\r\n            } else if (boardClass === 'x') {\r\n                winningMessageTextElement.innerText = `X's Win!`\r\n                if (this.state.gameOutcome === '') {\r\n                    this.setState({\r\n                        gameOutcome: 'x',\r\n                        gameOver: true\r\n                    })\r\n                }\r\n                this.updateGameOutcome('x')\r\n            } else if (boardClass === 'circle') {\r\n                winningMessageTextElement.innerText = `O's Win!`\r\n                if (this.state.gameOutcome === '') {\r\n                    this.setState({\r\n                        gameOutcome: 'circle',\r\n                        gameOver: true\r\n                    })\r\n                }\r\n                this.updateGameOutcome('circle')\r\n            }\r\n        }\r\n        winningMessageElement.classList.add('show')\r\n        // // clear session storage\r\n        // // -------------\r\n        clearStorage(key)\r\n        function clearStorage(key) {\r\n            window.sessionStorage.clear(key)\r\n        }\r\n    }\r\n\r\n    // a version of the endgame function specifically to be called by player 2 pulling data from db, to avoid multiple setstates and db updates\r\n    endGamePlayerTwo = (draw) => {\r\n        const key = this.props.match.params.gameKey\r\n        const winningMessageElement = document.getElementById('winningMessage')\r\n        const winningMessageTextElement = document.querySelector('[data-winning-message-text]')\r\n        if (this.state.gameOutcome === 'x') {\r\n            winningMessageTextElement.innerText = `X's Win!`\r\n            this.setState({\r\n                gameOver: true\r\n            })\r\n        } else if (this.state.gameOutcome === 'circle') {\r\n            winningMessageTextElement.innerText = `O's Win!`\r\n            this.setState({\r\n                gameOver: true\r\n            })\r\n        } else if ((draw) || (this.state.gameOutcome === 'draw')) {\r\n        // including x and o win conditions so that a final x or o placement win does not get triggered as a draw\r\n                winningMessageTextElement.innerText = \"Draw!\"\r\n                if (this.state.gameOutcome === '') {\r\n                    this.setState({\r\n                        gameOutcome: 'draw',\r\n                        gameOver: true\r\n                    })\r\n                }\r\n        }\r\n        winningMessageElement.classList.add('show')\r\n        // // clear session storage\r\n        // // -------------\r\n        clearStorage(key)\r\n        function clearStorage(key) {\r\n            window.sessionStorage.clear(key)\r\n        }\r\n    }\r\n\r\n    // clears board states and calls for clearing database info ------------\r\n    handleRestart = () => {\r\n        // --------------\r\n        // make sure user who clicks restart is one of the two players that has either player x or player o in session storage\r\n        // --------------\r\n\r\n        // remove cell classes\r\n        const cellElements = document.querySelectorAll('[data-cell]')\r\n        cellElements.forEach(cell => {\r\n            cell.classList.remove('x')\r\n            cell.classList.remove('circle')\r\n        })\r\n        // remove game outcome message\r\n        const winningMessageElement = document.getElementById('winningMessage')\r\n        winningMessageElement.classList.remove('show')\r\n\r\n        this.setState({\r\n            boardClass: 'x',\r\n            cellOne: '',\r\n            cellTwo: '',\r\n            cellThree: '',\r\n            cellFour: '',\r\n            cellFive: '',\r\n            cellSix: '',\r\n            cellSeven: '',\r\n            cellEight: '',\r\n            cellNine: '',\r\n            gameOutcome: '',\r\n            gameOver: false\r\n        })\r\n        // clears db\r\n        this.updateNewGame()\r\n    }\r\n\r\n    // if gameOutcome has been set to '' from restart, remove the game outcome message (for player 2)\r\n    handleRestartMessage = () => {\r\n        if (this.state.gameOutcome === '') {\r\n            // remove game outcome message\r\n            const winningMessageElement = document.getElementById('winningMessage')\r\n            winningMessageElement.classList.remove('show')\r\n        }\r\n    }\r\n\r\n    // clear database game info for new game-------\r\n    updateNewGame = () => {\r\n        const key = this.props.match.params.gameKey\r\n        // set board class back to x\r\n        const dbRefBoard = firebase.database().ref(`${key}/boardClass`);\r\n        dbRefBoard.once('value', (snap) => {\r\n            let value = snap.val();\r\n            value = 'x'\r\n            dbRefBoard.set(value);\r\n        })\r\n        // set cell classes and outcome back to ''\r\n        const dbCellRef = [\r\n            firebase.database().ref(`${key}/cellOne`),\r\n            firebase.database().ref(`${key}/cellTwo`),\r\n            firebase.database().ref(`${key}/cellThree`),\r\n            firebase.database().ref(`${key}/cellFour`),\r\n            firebase.database().ref(`${key}/cellFive`),\r\n            firebase.database().ref(`${key}/cellSix`),\r\n            firebase.database().ref(`${key}/cellSeven`),\r\n            firebase.database().ref(`${key}/cellEight`),\r\n            firebase.database().ref(`${key}/cellNine`),\r\n            firebase.database().ref(`${key}/gameOutcome`),\r\n            firebase.database().ref(`${key}/playerOneJoined`),\r\n            firebase.database().ref(`${key}/playerTwoJoined`),\r\n        ]\r\n        dbCellRef.forEach((ref) => {\r\n            ref.once('value', (snap) => {\r\n                let value = snap.val();\r\n                value = ''\r\n                ref.set(value);\r\n            })\r\n        })\r\n    }\r\n\r\n    // send game outcome info to firebase db --------------\r\n    updateGameOutcome = (symbol) => {\r\n        const key = this.props.match.params.gameKey\r\n        const dbRef = firebase.database().ref(`${key}/gameOutcome`);\r\n        // issue with 2 clients, \r\n        dbRef.once(\"value\", (snap) => {\r\n            let value = snap.val();\r\n            value = symbol\r\n            dbRef.set(value);\r\n        });\r\n    }\r\n\r\n    // send cell data to firebase ---------------------\r\n    updateCellData = (cell) => {\r\n        const key = this.props.match.params.gameKey\r\n        const dbRef = firebase.database().ref(`${key}/${cell}`);\r\n        const boardClass = this.state.boardClass\r\n        dbRef.once(\"value\", (snap) => {\r\n            let value = snap.val();\r\n            if (boardClass === 'x') {\r\n                value = 'x'\r\n                dbRef.set(value);\r\n            } else if (boardClass === 'circle') {\r\n                value = 'circle'\r\n                dbRef.set(value);\r\n            }\r\n        });\r\n    }\r\n\r\n    // send player one/two joined game to db ---------------\r\n    updatePlayerStatus = (player, status) => {\r\n        const key = this.props.match.params.gameKey\r\n        const dbRef = firebase.database().ref(`${key}/${player}`);\r\n        dbRef.once(\"value\", (snap) => {\r\n            let value = snap.val();\r\n            value = status\r\n            dbRef.set(value);\r\n        })\r\n    }\r\n\r\n    // send board class to firebase ---------------------\r\n    updateBoardClass = (stateName) => {\r\n        const key = this.props.match.params.gameKey\r\n        const dbRef = firebase.database().ref(`${key}/${stateName}`);\r\n        const boardClass = this.state.boardClass\r\n        dbRef.once(\"value\", (snap) => {\r\n            let value = snap.val();\r\n            if (boardClass === 'x') {\r\n                value = 'circle'\r\n                dbRef.set(value);\r\n            } else if (boardClass === 'circle') {\r\n                value = 'x'\r\n                dbRef.set(value);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        const boardClass = this.state.boardClass;\r\n        const state = this.state;\r\n        if (state.extraPlayer === true) {\r\n            return  <Redirect  to=\"/\" />\r\n        }\r\n        return (\r\n            <main>\r\n                <div className={`board ${boardClass}`} id=\"board\">\r\n                    <div className={`cell cellOne ${state.cellOne}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellTwo ${state.cellTwo}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellThree ${state.cellThree}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellFour ${state.cellFour}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellFive ${state.cellFive}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellSix ${state.cellSix}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellSeven ${state.cellSeven}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellEight ${state.cellEight}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellNine ${state.cellNine}`} data-cell onClick={this.handleClick}></div>\r\n                </div>\r\n                <div className=\"winning-message\" id=\"winningMessage\">\r\n                    <div data-winning-message-text></div>\r\n                    <div className=\"messageButtons\">\r\n                        <button id=\"restartButton\" onClick={this.handleRestart}>Restart</button>\r\n                        <Link to=\"/\" className=\"newGame\" onClick={this.handleRestart}>New Game</Link>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameBoard;","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header>\r\n            <Link to=\"/\" tabIndex=\"0\">\r\n                <p>Home</p>\r\n            </Link>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer>\r\n            <p>Created by <a href=\"https://alianicodes.com/\" target=\"_blank\" rel=\"noopener\">Arman Aliani</a></p>\r\n        </footer>\r\n    )\r\n}\r\n\r\nexport default Footer;","// imports\nimport React, { Component, Fragment } from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Home from './Home';\nimport GameLobby from './GameLobby';\nimport GameBoard from './GameBoard';\nimport Header from \"./Header\";\nimport Footer from \"./Footer\";\n\n\n\n\n// component\nclass App extends Component {\n  render() {\n    return (\n        <Router basename={process.env.PUBLIC_URL}>\n          <Fragment>\n            <Header />\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/lobby/:gameKey\" component={GameLobby} />\n            <Route path=\"/gameboard/:gameKey\" component={GameBoard} /> \n            <Footer />\n          </Fragment>\n        </Router>\n    )\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}