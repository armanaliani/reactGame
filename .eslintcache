[{"C:\\Users\\arman\\Documents\\projects\\reactTicTacToe\\tictactoe\\src\\index.js":"1","C:\\Users\\arman\\Documents\\projects\\reactTicTacToe\\tictactoe\\src\\App.js":"2","C:\\Users\\arman\\Documents\\projects\\reactTicTacToe\\tictactoe\\src\\reportWebVitals.js":"3","C:\\Users\\arman\\Documents\\projects\\reactTicTacToe\\tictactoe\\src\\Home.js":"4","C:\\Users\\arman\\Documents\\projects\\reactTicTacToe\\tictactoe\\src\\firebase.js":"5","C:\\Users\\arman\\Documents\\projects\\reactTicTacToe\\tictactoe\\src\\GameLobby.js":"6","C:\\Users\\arman\\Documents\\projects\\reactTicTacToe\\tictactoe\\src\\GameBoard.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":594,"mtime":1607623046928,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":1814,"mtime":1608839522086,"results":"12","hashOfConfig":"9"},{"size":597,"mtime":1607573752571,"results":"13","hashOfConfig":"9"},{"size":898,"mtime":1607623096715,"results":"14","hashOfConfig":"9"},{"size":22188,"mtime":1609109931098,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"18tn2il",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},"C:\\Users\\arman\\Documents\\projects\\reactTicTacToe\\tictactoe\\src\\index.js",[],["33","34"],"C:\\Users\\arman\\Documents\\projects\\reactTicTacToe\\tictactoe\\src\\App.js",[],"C:\\Users\\arman\\Documents\\projects\\reactTicTacToe\\tictactoe\\src\\reportWebVitals.js",[],"C:\\Users\\arman\\Documents\\projects\\reactTicTacToe\\tictactoe\\src\\Home.js",[],"C:\\Users\\arman\\Documents\\projects\\reactTicTacToe\\tictactoe\\src\\firebase.js",[],["35","36"],"C:\\Users\\arman\\Documents\\projects\\reactTicTacToe\\tictactoe\\src\\GameLobby.js",[],"C:\\Users\\arman\\Documents\\projects\\reactTicTacToe\\tictactoe\\src\\GameBoard.js",["37"],"import React, {Component} from 'react';\r\nimport firebase from './firebase';\r\nimport {Link} from 'react-router-dom';\r\n\r\n// component------------------\r\nclass GameBoard extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            game: {},\r\n            cellOne: '',\r\n            cellTwo: '',\r\n            cellThree: '',\r\n            cellFour: '',\r\n            cellFive: '',\r\n            cellSix: '',\r\n            cellSeven: '',\r\n            cellEight: '',\r\n            cellNine: '',\r\n            boardClass: 'x',\r\n            gameOutcome: '',\r\n            playerOneJoined:'',\r\n            playerTwoJoined:'',\r\n        }\r\n    }\r\n\r\n    // takes game link to retreive matching firebase game data --------------\r\n    componentDidMount() {\r\n        const key = this.props.match.params.gameKey\r\n        firebase\r\n        .database()\r\n        .ref(key)\r\n        .on(\"value\", (snapshot) => {\r\n            this.setState({\r\n                game: snapshot.val(),\r\n                cellOne: snapshot.val().cellOne,\r\n                cellTwo: snapshot.val().cellTwo,\r\n                cellThree: snapshot.val().cellThree,\r\n                cellFour: snapshot.val().cellFour,\r\n                cellFive: snapshot.val().cellFive,\r\n                cellSix: snapshot.val().cellSix,\r\n                cellSeven: snapshot.val().cellSeven,\r\n                cellEight: snapshot.val().cellEight,\r\n                cellNine: snapshot.val().cellNine,\r\n                boardClass: snapshot.val().boardClass,\r\n                gameOutcome: snapshot.val().gameOutcome,\r\n                playerOneJoined:snapshot.val().playerOneJoined,\r\n                playerTwoJoined:snapshot.val().playerTwoJoined,\r\n            })\r\n            \r\n            // // check game outcome on load\r\n            if (this.checkWin(this.state.boardClass)) {\r\n                this.endGame(false)\r\n            } else if (this.isDraw()) {\r\n                // calls to a second version of endGame that prevents the gameoutcome db override issue on draw game outcomes\r\n                this.endGamePlayerTwo(true)\r\n                this.setState({\r\n                    gameOutcome: 'draw'\r\n                })\r\n            }\r\n            this.handleRestartMessage()\r\n            // second game instance is somehow mounting and pushing data and overwriting outcomes\r\n        })\r\n\r\n    }\r\n\r\n    // when cell is clicked, place the appropriate marker based on turn, push new turn to firebase, and change cell state to 'x' or 'circle' -------------------------\r\n    handleClick = (e) => {\r\n        const cell = e.target\r\n        const state = this.state\r\n        const boardClass = state.boardClass\r\n\r\n        // isolating the classname with cell'Number'\r\n        const cellClasses = e.target.className\r\n        const cellClassArr = cellClasses.split(' ');\r\n        const cellNumberArr = cellClassArr.slice(1,2)\r\n        const cellStateClass = cellNumberArr.toString();\r\n\r\n        // making sure there isnt already a marker in the chosen cell-------\r\n        if ((!cellClassArr.includes('x')) && (!cellClassArr.includes('circle'))) {\r\n\r\n            // setting cell state of matching state class to x or circle\r\n            if(cellStateClass === 'cellOne') {\r\n                this.setState({\r\n                    cellOne: boardClass\r\n                })\r\n                this.updateCellData('cellOne')\r\n            } else if (cellStateClass === 'cellTwo') {\r\n                this.setState({\r\n                    cellTwo: boardClass\r\n                })\r\n                this.updateCellData('cellTwo')\r\n            } else if (cellStateClass === 'cellThree') {\r\n                this.setState({\r\n                    cellThree: boardClass\r\n                })\r\n                this.updateCellData('cellThree')\r\n            } else if (cellStateClass === 'cellFour') {\r\n                this.setState({\r\n                    cellFour: boardClass\r\n                })\r\n                this.updateCellData('cellFour')\r\n            } else if (cellStateClass === 'cellFive') {\r\n                this.setState({\r\n                    cellFive: boardClass\r\n                })\r\n                this.updateCellData('cellFive')\r\n            } else if (cellStateClass === 'cellSix') {\r\n                this.setState({\r\n                    cellSix: boardClass\r\n                })\r\n                this.updateCellData('cellSix')\r\n            } else if (cellStateClass === 'cellSeven') {\r\n                this.setState({\r\n                    cellSeven: boardClass\r\n                })\r\n                this.updateCellData('cellSeven')\r\n            } else if (cellStateClass === 'cellEight') {\r\n                this.setState({\r\n                    cellEight: boardClass\r\n                })\r\n                this.updateCellData('cellEight')\r\n            } else if (cellStateClass === 'cellNine') {\r\n                this.setState({\r\n                    cellNine: boardClass\r\n                })\r\n                this.updateCellData('cellNine')\r\n            }\r\n\r\n            // switch player turns\r\n            this.switchTurns()\r\n\r\n            // places X or O in cell spot\r\n            placeMark(cell, boardClass)\r\n            function placeMark(cell, currentClass) {\r\n                cell.classList.add(currentClass)\r\n            }\r\n\r\n            if (this.checkWin(boardClass)) {\r\n                this.endGame(false)\r\n                this.setState({\r\n                    gameOutcome: boardClass,\r\n                })\r\n            } else if (this.isDraw()) {\r\n                this.endGame(true)\r\n                this.setState({\r\n                    gameOutcome: 'draw',\r\n                })\r\n            } else {\r\n                this.switchTurns()\r\n            }\r\n        }    \r\n        \r\n        // create and add function that sends a param to local storage to set one player as player x and the other player as player 0\r\n        // local storage logic; \r\n            // on first turn, adds 'player x' param to local storage\r\n            // checks to see if player x param exists in local storage, if not, gives a player o param to local storage. \r\n            // update placeMark() function to check to see which player param is in local storage, and only allow the player to place their specific mark\r\n            // before it can assign a player x or player o param to loca storage, it must also check that there is no player 1 or player 2 object already in place in the database, or else the player x and player o local storage params have already been issued on other devices\r\n\r\n        const key = this.props.match.params.gameKey\r\n        // assigning x and o signs to players, and not allowing more than 2 players in a single game\r\n        if ((state.playerOneJoined === '' ) && (state.playerTwoJoined === '')) {\r\n        // if both states are missing;\r\n            // push 'playerX' to local storage \r\n            this.setStorage(key, 'playerX');\r\n            console.log(window.sessionStorage)\r\n            //  push player One joined to db\r\n            this.updatePlayerStatus('playerOneJoined', 'yes')\r\n            // set state player one joined\r\n            this.setState({\r\n                playerOneJoined: 'yes'\r\n            })\r\n            //  run placemark for boardclass x if boardclass is also x\r\n            if (state.boardClass === 'x') {\r\n                this.placeMark(cell, boardClass)\r\n                console.log('placed x')\r\n            }\r\n            // test\r\n            console.log('both no')\r\n        } else if ((state.playerOneJoined === 'yes') && (state.playerTwoJoined === '')) {\r\n        // if player one has joined but player 2 has not;\r\n            // push 'playerO' to local storage \r\n            this.setStorage(key, 'playerO');\r\n            console.log(window.sessionStorage)\r\n            //  push player Two joined to db\r\n            this.updatePlayerStatus('playerTwoJoined', 'yes')\r\n            // set state player two joined\r\n            this.setState({\r\n                playerTwoJoined: 'yes'\r\n            })\r\n            //  run placemark for boardclass o if boardclass is also circle\r\n            if (state.boardClass === 'o') {\r\n                this.placeMark(cell, boardClass)\r\n                console.log('placed o')\r\n            }\r\n            // test \r\n            console.log('player one yes, player two no')\r\n        } else if (state.playerOneJoined && state.playerTwoJoined === 'yes') {\r\n            // if both players have joined on db, check for local storage to verify which player the user currently is one of the original two players\r\n            const storageThing = JSON.parse(window.sessionStorage.getItem(key, JSON.stringify(key))) \r\n            console.log(storageThing, 'the storage item')\r\n\r\n            if ((storageThing === 'playerX') || (storageThing === 'PlayerO')) {\r\n            // if local storage has either player x or player o param;\r\n                // run placemark for that params boardclass\r\n                console.log('verified player')\r\n            } else if ((!storageThing === 'playerX') && (!storageThing === 'PlayerO')) {\r\n            // if local storage has neither player x or player o params;\r\n                // dont run anything (should there be an error handling message for the user?)\r\n                console.log('who are you')\r\n            }\r\n                console.log('both players yes')\r\n        }\r\n\r\n        // const key = this.props.match.params.gameKey\r\n        const gameObj = [\r\n            state.cellOne,\r\n            state.cellTwo,\r\n            state.cellThree,\r\n            state.cellFour,\r\n            state.cellFive,\r\n            state.cellSix,\r\n            state.cellSeven,\r\n            state.cellEight,\r\n            state.cellNine,\r\n        ];\r\n        // console.log(gameObj)\r\n        // makes sure board is clear before pushing gameobject to local storage, ensures its only pushed once per game\r\n        if ((!gameObj.includes('x')) && (!gameObj.includes('circle'))) {\r\n            this.setStorage(key, '');\r\n            console.log('u good')\r\n        }\r\n        // ----------------\r\n        // on endgame; clear local storages\r\n    }\r\n\r\n    // place x/o mark on board\r\n    placeMark(cell, currentClass) {\r\n        cell.classList.add(currentClass)\r\n    }\r\n\r\n    // adds game to local storage\r\n    setStorage(key, status) {\r\n        const sessionStorageItem = key\r\n        const localGameObject = [\r\n                // will hold either 'playerX' or 'playerO'\r\n                status\r\n        ]\r\n        window.sessionStorage.setItem((sessionStorageItem, JSON.stringify(sessionStorageItem)), localGameObject.join(\",\"));\r\n        \r\n    console.log(window.sessionStorage)\r\n    }\r\n\r\n    // switches 'x'/'circle' turn -------------\r\n    switchTurns = () => {\r\n        const boardClass = this.state.boardClass\r\n        // switch board class\r\n        if  (boardClass === 'x') {\r\n            this.setState({\r\n                boardClass: 'circle'\r\n            })\r\n            this.updateBoardClass('boardClass')\r\n        } else if (boardClass === 'circle') {\r\n            this.setState({\r\n                boardClass: 'x'\r\n            })\r\n            this.updateBoardClass('boardClass')\r\n        }\r\n    }\r\n\r\n    // check to see if theres a winning combination------------\r\n    checkWin = (currentClass) => {\r\n        const cellElements = document.querySelectorAll('[data-cell]')\r\n        const winningCombinations = [\r\n            // horizontals\r\n            [0,1,2],\r\n            [3,4,5],\r\n            [6,7,8],\r\n            // verticals\r\n            [0,3,6],\r\n            [1,4,7],\r\n            [2,5,8],\r\n            // diagonals\r\n            [0,4,8],\r\n            [2,4,6],\r\n        ]\r\n        // .some will return true if any values within the array are true\r\n        return winningCombinations.some(combination => {\r\n            return combination.every(index => {\r\n                return cellElements[index].classList.contains(currentClass)\r\n            })\r\n        })\r\n    }\r\n\r\n    // check to see if all cells have a className of 'x' or 'circle'\r\n    isDraw = () => {\r\n        // extra layer of error handling security for when last cell is also the game winning cell\r\n        // if (!this.checkWin()) {\r\n            const cellElements = document.querySelectorAll('[data-cell]')\r\n            return [...cellElements].every(cell => {\r\n                return cell.classList.contains('x') || cell.classList.contains('circle')\r\n            })\r\n        // }\r\n    }\r\n\r\n    // display game outcome\r\n    endGame = (draw) => {\r\n        const boardClass = this.state.boardClass\r\n        const winningMessageElement = document.getElementById('winningMessage')\r\n        const winningMessageTextElement = document.querySelector('[data-winning-message-text]')\r\n        if (this.state.gameOutcome === 'x') {\r\n            winningMessageTextElement.innerText = `X's Win!`\r\n        } else if (this.state.gameOutcome === 'circle') {\r\n            winningMessageTextElement.innerText = `O's Win!`\r\n        } else {\r\n            if ((draw) || (this.state.gameOutcome === 'draw')) {\r\n                winningMessageTextElement.innerText = \"Draw!\"\r\n                if (this.state.gameOutcome === '') {\r\n                    this.setState({\r\n                        gameOutcome: 'draw'\r\n                    })\r\n                }\r\n                this.updateGameOutcome('draw')\r\n            } else if (boardClass === 'x') {\r\n                winningMessageTextElement.innerText = `X's Win!`\r\n                if (this.state.gameOutcome === '') {\r\n                    this.setState({\r\n                        gameOutcome: 'x'\r\n                    })\r\n                }\r\n                this.updateGameOutcome('x')\r\n            } else if (boardClass === 'circle') {\r\n                winningMessageTextElement.innerText = `O's Win!`\r\n                if (this.state.gameOutcome === '') {\r\n                    this.setState({\r\n                        gameOutcome: 'circle'\r\n                    })\r\n                }\r\n                this.updateGameOutcome('circle')\r\n            }\r\n        }\r\n        winningMessageElement.classList.add('show')\r\n\r\n        // -------------\r\n        // clear local storage\r\n        // -------------\r\n        const key = this.props.match.params.gameKey\r\n        clearStorage(key)\r\n        function clearStorage(key) {\r\n            window.sessionStorage.removeItem(key)\r\n        }\r\n    }\r\n\r\n    // a version of the endgame function specifically to be called by player 2 pulling data from db, to avoid multiple setstates and db updates\r\n    endGamePlayerTwo = (draw) => {\r\n        const boardClass = this.state.boardClass\r\n        const winningMessageElement = document.getElementById('winningMessage')\r\n        const winningMessageTextElement = document.querySelector('[data-winning-message-text]')\r\n        if (this.state.gameOutcome === 'x') {\r\n            winningMessageTextElement.innerText = `X's Win!`\r\n        } else if (this.state.gameOutcome === 'circle') {\r\n            winningMessageTextElement.innerText = `O's Win!`\r\n        } \r\n        // including x and o win conditions so that a final x or o placement win does not get triggered as a draw\r\n        else if ((draw) || (this.state.gameOutcome === 'draw')) {\r\n                winningMessageTextElement.innerText = \"Draw!\"\r\n                if (this.state.gameOutcome === '') {\r\n                    this.setState({\r\n                        gameOutcome: 'draw'\r\n                    })\r\n                }\r\n        }\r\n        winningMessageElement.classList.add('show')\r\n    }\r\n\r\n    // clears board states and calls for clearing database info ------------\r\n    handleRestart = () => {\r\n        // --------------\r\n        // make sure user who clicks restart is one of the two players that has either player x or player o in local storage\r\n        // --------------\r\n\r\n        // remove cell classes\r\n        const cellElements = document.querySelectorAll('[data-cell]')\r\n        cellElements.forEach(cell => {\r\n            cell.classList.remove('x')\r\n            cell.classList.remove('circle')\r\n        })\r\n        // remove game outcome message\r\n        const winningMessageElement = document.getElementById('winningMessage')\r\n        winningMessageElement.classList.remove('show')\r\n\r\n        this.setState({\r\n            boardClass: 'x',\r\n            cellOne: '',\r\n            cellTwo: '',\r\n            cellThree: '',\r\n            cellFour: '',\r\n            cellFive: '',\r\n            cellSix: '',\r\n            cellSeven: '',\r\n            cellEight: '',\r\n            cellNine: '',\r\n            gameOutcome: '',\r\n        })\r\n        // clears db\r\n        this.updateNewGame()\r\n    }\r\n\r\n    // if gameOutcome has been set to '' from restart, remove the game outcome message (for player 2)\r\n    handleRestartMessage = () => {\r\n        if (this.state.gameOutcome === '') {\r\n            // remove game outcome message\r\n            const winningMessageElement = document.getElementById('winningMessage')\r\n            winningMessageElement.classList.remove('show')\r\n        }\r\n    }\r\n\r\n    // clear database game info for new game-------\r\n    updateNewGame = () => {\r\n        const key = this.props.match.params.gameKey\r\n        // set board class back to x\r\n        const dbRefBoard = firebase.database().ref(`${key}/boardClass`);\r\n        dbRefBoard.once('value', (snap) => {\r\n            let value = snap.val();\r\n            value = 'x'\r\n            dbRefBoard.set(value);\r\n        })\r\n        // set cell classes and outcome back to ''\r\n        const dbCellRef = [\r\n            firebase.database().ref(`${key}/cellOne`),\r\n            firebase.database().ref(`${key}/cellTwo`),\r\n            firebase.database().ref(`${key}/cellThree`),\r\n            firebase.database().ref(`${key}/cellFour`),\r\n            firebase.database().ref(`${key}/cellFive`),\r\n            firebase.database().ref(`${key}/cellSix`),\r\n            firebase.database().ref(`${key}/cellSeven`),\r\n            firebase.database().ref(`${key}/cellEight`),\r\n            firebase.database().ref(`${key}/cellNine`),\r\n            firebase.database().ref(`${key}/gameOutcome`),\r\n            firebase.database().ref(`${key}/playerOneJoined`),\r\n            firebase.database().ref(`${key}/playerTwoJoined`),\r\n        ]\r\n        dbCellRef.forEach((ref) => {\r\n            ref.once('value', (snap) => {\r\n                let value = snap.val();\r\n                value = ''\r\n                ref.set(value);\r\n            })\r\n        })\r\n    }\r\n\r\n    // send game outcome info to firebase db --------------\r\n    updateGameOutcome = (symbol) => {\r\n        const key = this.props.match.params.gameKey\r\n        const dbRef = firebase.database().ref(`${key}/gameOutcome`);\r\n        // issue with 2 clients, \r\n        dbRef.once(\"value\", (snap) => {\r\n            let value = snap.val();\r\n            value = symbol\r\n            dbRef.set(value);\r\n        });\r\n    }\r\n\r\n    // send cell data to firebase ---------------------\r\n    updateCellData = (cell) => {\r\n        const key = this.props.match.params.gameKey\r\n        const dbRef = firebase.database().ref(`${key}/${cell}`);\r\n        const boardClass = this.state.boardClass\r\n        dbRef.once(\"value\", (snap) => {\r\n            let value = snap.val();\r\n            if (boardClass === 'x') {\r\n                value = 'x'\r\n                dbRef.set(value);\r\n            } else if (boardClass === 'circle') {\r\n                value = 'circle'\r\n                dbRef.set(value);\r\n            }\r\n        });\r\n    }\r\n\r\n    // send player one/two joined game to db ---------------\r\n    updatePlayerStatus = (player, status) => {\r\n        const key = this.props.match.params.gameKey\r\n        const dbRef = firebase.database().ref(`${key}/${player}`);\r\n        dbRef.once(\"value\", (snap) => {\r\n            let value = snap.val();\r\n            value = status\r\n            dbRef.set(value);\r\n        })\r\n    }\r\n\r\n    // send board class to firebase ---------------------\r\n    updateBoardClass = (stateName) => {\r\n        const key = this.props.match.params.gameKey\r\n        const dbRef = firebase.database().ref(`${key}/${stateName}`);\r\n        const boardClass = this.state.boardClass\r\n        dbRef.once(\"value\", (snap) => {\r\n            let value = snap.val();\r\n            if (boardClass === 'x') {\r\n                value = 'circle'\r\n                dbRef.set(value);\r\n            } else if (boardClass === 'circle') {\r\n                value = 'x'\r\n                dbRef.set(value);\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        const boardClass = this.state.boardClass;\r\n        const state = this.state;\r\n        return (\r\n            <main>\r\n                <div className={`board ${boardClass}`} id=\"board\">\r\n                    <div className={`cell cellOne ${state.cellOne}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellTwo ${state.cellTwo}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellThree ${state.cellThree}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellFour ${state.cellFour}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellFive ${state.cellFive}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellSix ${state.cellSix}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellSeven ${state.cellSeven}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellEight ${state.cellEight}`} data-cell onClick={this.handleClick}></div>\r\n                    <div className={`cell cellNine ${state.cellNine}`} data-cell onClick={this.handleClick}></div>\r\n                </div>\r\n                <div className=\"winning-message\" id=\"winningMessage\">\r\n                    <div data-winning-message-text></div>\r\n                    <div className=\"messageButtons\">\r\n                        <button id=\"restartButton\" onClick={this.handleRestart}>Restart</button>\r\n                        <Link to=\"/\" className=\"newGame\" onClick={this.handleRestart}>New Game</Link>\r\n                    </div>\r\n                </div>\r\n            </main>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameBoard;",{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"38","replacedBy":"42"},{"ruleId":"40","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":357,"column":15,"nodeType":"46","messageId":"47","endLine":357,"endColumn":25},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],["48"],["49"],"no-unused-vars","'boardClass' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]